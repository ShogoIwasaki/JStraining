export function* fib() {
  // フィボナッチ数列の最初の2項を設定
  // prev ... 前の項, next ... 次の項
  let [prev, next] = [0, 1];
  // フィボナッチ数列は無限に続くため、無限ループを開始させる。
  while (true) {
    // 前の項に次の項を, 次の項には古いprevとnextの和を入れる
    [prev, next] = [next, prev + next];
    // フィボナッチ数の前の項（nextが入っているので実質その回の後ろの項）を返す
    yield prev;
  }
}

// ジェネレーター関数には*をつける。
// yield(イールド)は一般的な関数のreturnに相当するもので、
// ジェネレータ関数ではyieldを使用する。
// yieldはジェネレーター関数を一時停止したり再開したりするために使用します。
// つまり呼び出すたびに一時停止、再開を繰り返す。
// １，１，２，３，５，８，１３，２１,,,